1.使用String类的public String toUpperCase()方法可以将一个字符串中的小写字母变成大写字母，
使用public String toLowerCase()方法可以将一个字符串中的大写字母变成小写字母。编写一个程序，
使用这两个方法实现大小写的转换。
思路：
1.定义一个String类型变量。
2.定义两个自定义方法自方法中定义toUpperCase()方法和toLoweerCase()方法
3.接着调用输出就可以了。
==================================================================================
==================================================================================
==================================================================================
2.使用String类的public String concat(String str)方法可以把调用该方法的字符串与参与指定的字符串连接，
把str指定的串连接到当前串的尾部获得一个新的串。编写程序通过连接两个串的到一个新的串，并输出这个新串。
==================================================================================
==================================================================================
==================================================================================
3.String类的public char CharAt(int index)方法可以得到当前字符串index位置上的一个字符。说出程序的输出
结果。
public class E3
{
	String s = "中国科技技术大学";
	char a = s.charAt(2), b = s.charAt(6);
	System.out.println(a);//科
	System.out.println(b);//大
}
输出结果：科----------大
==================================================================================
==================================================================================
==================================================================================
4.使用java.util包中的Array类的静态方法public static void sort(double a[])可以把参数a指定的double型
数组按升序排序，使用java.util包中的Arrays类的静态方法public static void sort(double a[], int start,
 int end)可以把参数a指定的double型数组中从位置start到end-1位置的数按升序排序。写出下列程序的输出结果。
 import java.util.*;
 public class E4
 {
 	public static void main(String args[])
 	{
 		int a[] = {23, 676, 89, 90, -987};
 		double b[] = {12.89, 90.87, 34, 678.987, -98.78, 0.89};
 		Arrays.sort(a);
 		Arrays.sort(b, 1, 4);
 		for(int i = 0; i <= 4; i++)
 		{
 			System.out.println(a[i]+",");//-987, 23, 89, 90
 		}
 		for(int i = 0; i <= b.length; i++)
 		{
 			System.out.println(b[i]+",");//12.89, 34, 90.87, 678.987, -98.78, 0.89
 		}
 	}
 }
 输出结果是：
-987, 23, 89, 90
12.89, 34, 90.87, 678.987, -98.78, 0.89
==================================================================================
==================================================================================
==================================================================================
5.使用java.lang包中System类的静态方法arraycopy可以实现数组的快速复制，上机实习下列程序，并总结出arraycopy方法参数的使用规则。

public class ArrayCopy
{
	public static viod main(String args[])
	{
		char a1[] = {'a','b','c','d','e','f'}, b1[] = {'1', '2', '3', '4', '5', '6'};
		System.arraycopy(a1, 0 , b1, 1, a1.leng-1);
		System.out.println
	}
}